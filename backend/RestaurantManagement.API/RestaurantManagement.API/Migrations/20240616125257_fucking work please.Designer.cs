// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantManagement.API.Data;

#nullable disable

namespace RestaurantManagement.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240616125257_fucking work please")]
    partial class fuckingworkplease
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RestaurantManagement.API.Models.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "216b9c39-c4a0-4c0d-ac5c-4c487a8452f0",
                            Email = "waiter1@example.com",
                            EmailConfirmed = true,
                            FullName = "Avi",
                            IsManager = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WAITER1@EXAMPLE.COM",
                            NormalizedUserName = "WAITER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEPx5n4t37+tPumSWbP3Ecy7a5K1OlIlMF0iZxXVlJtGsr+urPyMv6Ji+KnTSgwO07g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            Type = 2,
                            UserName = "waiter1"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9884a825-3c7b-4cca-aac0-eea9210aa9c7",
                            Email = "waiter2@example.com",
                            EmailConfirmed = true,
                            FullName = "Natan",
                            IsManager = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WAITER2@EXAMPLE.COM",
                            NormalizedUserName = "WAITER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEM/b4LQIy66S/inkDePALmLz377/e0lSKP0WY1gvm1dXqRVJr018ps8rXx6aXyGaxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            Type = 2,
                            UserName = "waiter2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "821d069c-9a0a-4af3-8454-54fbfaa693a5",
                            Email = "waiter3@example.com",
                            EmailConfirmed = true,
                            FullName = "Savarinovvvvv",
                            IsManager = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WAITER3@EXAMPLE.COM",
                            NormalizedUserName = "WAITER3",
                            PasswordHash = "AQAAAAIAAYagAAAAECHH6MTteEnWXl5skWQ80DlzO3ZhI2LrHpRcq4re/SxBHkl4AMWI0qPXDDlo1PP7GQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            Type = 2,
                            UserName = "waiter3"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "477f4c29-9041-4d5a-9c22-489436d483d4",
                            Email = "waiter4@example.com",
                            EmailConfirmed = true,
                            FullName = "tal WithlastName",
                            IsManager = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WAITER4@EXAMPLE.COM",
                            NormalizedUserName = "WAITER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEPAUCRxtUE88QSSNnmSqLQJObgqYiW1TmTWJ0WP8Tkath+//joLdJHxMhoU6gpp3bA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            Type = 2,
                            UserName = "waiter4"
                        });
                });

            modelBuilder.Entity("RestaurantManagement.API.Models.Shift", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTicked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WeekId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WeekId");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndHour = new DateTime(2024, 6, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 23, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת בוקר",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 2,
                            EndHour = new DateTime(2024, 6, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 24, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת בוקר",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 3,
                            EndHour = new DateTime(2024, 6, 25, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת בוקר",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 4,
                            EndHour = new DateTime(2024, 6, 26, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 26, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת בוקר",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 5,
                            EndHour = new DateTime(2024, 6, 27, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת בוקר",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 6,
                            EndHour = new DateTime(2024, 6, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 28, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת בוקר",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 7,
                            EndHour = new DateTime(2024, 6, 29, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 29, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת בוקר",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 8,
                            EndHour = new DateTime(2024, 6, 23, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת ערב",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 9,
                            EndHour = new DateTime(2024, 6, 24, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת ערב",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 10,
                            EndHour = new DateTime(2024, 6, 25, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 25, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת ערב",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 11,
                            EndHour = new DateTime(2024, 6, 26, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 26, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת ערב",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 12,
                            EndHour = new DateTime(2024, 6, 27, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 27, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת ערב",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 13,
                            EndHour = new DateTime(2024, 6, 28, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת ערב",
                            Type = 2,
                            WeekId = 1
                        },
                        new
                        {
                            ID = 14,
                            EndHour = new DateTime(2024, 6, 29, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTicked = false,
                            StartHour = new DateTime(2024, 6, 29, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            Subject = "משמרת ערב",
                            Type = 2,
                            WeekId = 1
                        });
                });

            modelBuilder.Entity("RestaurantManagement.API.Models.Week", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekStatus")
                        .HasColumnType("int");

                    b.Property<string>("WeeklyComment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Weeks");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EndDate = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WeekStatus = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RestaurantManagement.API.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RestaurantManagement.API.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantManagement.API.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RestaurantManagement.API.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantManagement.API.Models.Shift", b =>
                {
                    b.HasOne("RestaurantManagement.API.Models.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RestaurantManagement.API.Models.Week", "Week")
                        .WithMany("Shifts")
                        .HasForeignKey("WeekId");

                    b.Navigation("Employee");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("RestaurantManagement.API.Models.Employee", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("RestaurantManagement.API.Models.Week", b =>
                {
                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
